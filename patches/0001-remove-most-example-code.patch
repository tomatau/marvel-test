From c8dcf457a5787b5ac0c93e82818a4bddfdcedb02 Mon Sep 17 00:00:00 2001
From: Thomas Hudspith-Tatham <iammotivated@gmail.com>
Date: Sun, 3 Sep 2017 16:10:10 +0100
Subject: [PATCH] remove most example code

---
 src/app/actions/bar.actions.js                     |   9 --
 src/app/actions/bar.actions.spec.js                |  31 -------
 src/app/actions/flash.actions.js                   |  18 ----
 src/app/actions/flash.actions.spec.js              |  49 ----------
 src/app/actions/types.js                           |   5 -
 src/app/components/@FlashMessages/FlashMessages.js |  43 ---------
 .../@FlashMessages/FlashMessages.spec.js           | 103 ---------------------
 src/app/components/@FlashMessages/Msg.js           |  24 -----
 src/app/components/@FlashMessages/Msg.module.scss  |  29 ------
 src/app/components/@FlashMessages/Msg.spec.js      |  53 -----------
 src/app/components/App/App.js                      |  19 ----
 src/app/components/App/App.spec.js                 |  33 +------
 src/app/components/App/App.spec.js.snap            |  12 ---
 .../components/HeadNavigation/HeadNavigation.js    |   6 --
 .../HeadNavigation/HeadNavigation.spec.js          |   2 -
 src/app/reducers/bar.reducers.js                   |  28 ------
 src/app/reducers/bar.reducers.spec.js              |  82 ----------------
 src/app/reducers/flash.reducers.js                 |  23 -----
 src/app/reducers/flash.reducers.spec.js            |  85 -----------------
 src/app/reducers/index.js                          |   4 -
 src/app/routes/BarRoute/BarRoute.js                |  38 --------
 src/app/routes/BarRoute/BarRoute.module.scss       |   7 --
 src/app/routes/BarRoute/BarRoute.spec.js           |  11 ---
 src/app/routes/BarRoute/BarRoute.spec.js.snap      |  34 -------
 src/app/routes/OopsRoute/OopsRoute.js              |  10 --
 src/app/routes/OopsRoute/OopsRoute.spec.js         |  11 ---
 src/app/routes/OopsRoute/OopsRoute.spec.js.snap    |   9 --
 src/app/routes/PrivateRoute/PrivateRoute.js        |  18 ----
 src/app/sagas/index.js                             |  36 +------
 src/app/sagas/index.spec.js                        |  38 --------
 src/app/selectors/flash.selectors.js               |   7 --
 src/app/selectors/flash.selectors.spec.js          |  39 --------
 src/assets/avatar.jpeg                             | Bin 5553 -> 0 bytes
 src/server-instance.js                             |   2 -
 src/server/api/index.js                            |   3 -
 src/server/middleware/flashMessages.js             |  21 -----
 src/server/middleware/sessionFlashArray.js         |  16 ----
 src/server/router.js                               |   3 -
 test/functional/client/client-render.test.js       |  93 -------------------
 test/functional/server/server-api.test.js          |   7 --
 test/functional/server/server-render.test.js       |   3 -
 41 files changed, 6 insertions(+), 1058 deletions(-)
 delete mode 100644 src/app/actions/bar.actions.js
 delete mode 100644 src/app/actions/bar.actions.spec.js
 delete mode 100644 src/app/actions/flash.actions.js
 delete mode 100644 src/app/actions/flash.actions.spec.js
 delete mode 100644 src/app/components/@FlashMessages/FlashMessages.js
 delete mode 100644 src/app/components/@FlashMessages/FlashMessages.spec.js
 delete mode 100644 src/app/components/@FlashMessages/Msg.js
 delete mode 100644 src/app/components/@FlashMessages/Msg.module.scss
 delete mode 100644 src/app/components/@FlashMessages/Msg.spec.js
 delete mode 100644 src/app/reducers/bar.reducers.js
 delete mode 100644 src/app/reducers/bar.reducers.spec.js
 delete mode 100644 src/app/reducers/flash.reducers.js
 delete mode 100644 src/app/reducers/flash.reducers.spec.js
 delete mode 100644 src/app/routes/BarRoute/BarRoute.js
 delete mode 100644 src/app/routes/BarRoute/BarRoute.module.scss
 delete mode 100644 src/app/routes/BarRoute/BarRoute.spec.js
 delete mode 100644 src/app/routes/BarRoute/BarRoute.spec.js.snap
 delete mode 100644 src/app/routes/OopsRoute/OopsRoute.js
 delete mode 100644 src/app/routes/OopsRoute/OopsRoute.spec.js
 delete mode 100644 src/app/routes/OopsRoute/OopsRoute.spec.js.snap
 delete mode 100644 src/app/routes/PrivateRoute/PrivateRoute.js
 delete mode 100644 src/app/selectors/flash.selectors.js
 delete mode 100644 src/app/selectors/flash.selectors.spec.js
 delete mode 100644 src/assets/avatar.jpeg
 delete mode 100644 src/server/middleware/flashMessages.js
 delete mode 100644 src/server/middleware/sessionFlashArray.js

diff --git a/src/app/actions/bar.actions.js b/src/app/actions/bar.actions.js
deleted file mode 100644
index 16f540c..0000000
--- a/src/app/actions/bar.actions.js
+++ /dev/null
@@ -1,9 +0,0 @@
-import { request } from 'app/utils'
-import { API_FETCH } from 'app/actions/types'
-
-export const apiFetch = () => ({
-  type: API_FETCH,
-  payload: {
-    promise: request.fetch('/api/bar'),
-  },
-})
diff --git a/src/app/actions/bar.actions.spec.js b/src/app/actions/bar.actions.spec.js
deleted file mode 100644
index 99d0bf9..0000000
--- a/src/app/actions/bar.actions.spec.js
+++ /dev/null
@@ -1,31 +0,0 @@
-import { API_FETCH } from 'app/actions/types'
-import { request } from 'app/utils'
-import { apiFetch } from './bar.actions'
-
-describe('Bar Actions', function () {
-  describe('apiFetch()', () => {
-    beforeEach(() => {
-      sinon.stub(request, 'fetch')
-    })
-
-    afterEach(() => {
-      request.fetch.restore()
-    })
-
-    it('returns an action with type API_FETCH', () => {
-      expect(apiFetch()).to.have.property('type', API_FETCH)
-    })
-
-    it('calls fetch with /api/bar', () => {
-      apiFetch()
-      expect(request.fetch).to.have.been.calledWith('/api/bar')
-    })
-
-    it('resolves the promise from fetching /api/bar', async () => {
-      const requestResolve = { some: 'data' }
-      request.fetch.returns(Promise.resolve(requestResolve))
-
-      expect(apiFetch().payload.promise).to.eventually.eql(requestResolve)
-    })
-  })
-})
diff --git a/src/app/actions/flash.actions.js b/src/app/actions/flash.actions.js
deleted file mode 100644
index 99f3853..0000000
--- a/src/app/actions/flash.actions.js
+++ /dev/null
@@ -1,18 +0,0 @@
-import uuid from 'uuid'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from 'app/actions/types'
-
-const makeFlash = (message, type='info') => ({
-  type,
-  message,
-  id: uuid.v1(),
-})
-
-export const removeMessage = (id) => ({
-  type: REMOVE_MESSAGE,
-  payload: { id },
-})
-
-export const addMessage = (message, type='info') => ({
-  type: ADD_MESSAGE,
-  payload: makeFlash(message, type),
-})
diff --git a/src/app/actions/flash.actions.spec.js b/src/app/actions/flash.actions.spec.js
deleted file mode 100644
index 25d9f48..0000000
--- a/src/app/actions/flash.actions.spec.js
+++ /dev/null
@@ -1,49 +0,0 @@
-import * as actions from './flash.actions'
-import uuid from 'uuid'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from 'app/actions/types'
-
-describe('Flash Actions', ()=> {
-  describe('addMessage()', ()=> {
-    beforeEach(()=> {
-      sinon.stub(uuid, 'v1')
-    })
-
-    afterEach(()=> {
-      uuid.v1.restore()
-    })
-
-    it('returns an action with type ADD_MESSAGE', () => {
-      expect(actions.addMessage()).to.have.property('type', ADD_MESSAGE)
-    })
-
-    it('returns an action with flash msg and a default type', ()=> {
-      const uuidReturn = { data: { some: 'data' } }
-      const message = 'test message'
-      uuid.v1.returns(uuidReturn)
-      expect(actions.addMessage(message)).to.have.property('payload')
-        .which.eql({
-          type: 'info',
-          message,
-          id: uuidReturn,
-        })
-    })
-
-    it('allows overwriting of the message type', ()=> {
-      const type = 'test type'
-      expect(actions.addMessage(null, type))
-        .to.have.nested.property('payload.type', type)
-    })
-  })
-
-  describe('removeMessage()', () => {
-    it('returns an action with type REMOVE_MESSAGE', () => {
-      expect(actions.removeMessage()).to.have.property('type', REMOVE_MESSAGE)
-    })
-
-    it('sets payload with id from arguments', () => {
-      const id = 'test flash id'
-      expect(actions.removeMessage(id)).to.have.property('payload')
-        .which.eql({ id })
-    })
-  })
-})
diff --git a/src/app/actions/types.js b/src/app/actions/types.js
index 3249a25..e69de29 100644
--- a/src/app/actions/types.js
+++ b/src/app/actions/types.js
@@ -1,5 +0,0 @@
-
-export const API_FETCH = 'bar/API_FETCH'
-
-export const REMOVE_MESSAGE = 'flash/REMOVE_MESSAGE'
-export const ADD_MESSAGE = 'flash/ADD_MESSAGE'
diff --git a/src/app/components/@FlashMessages/FlashMessages.js b/src/app/components/@FlashMessages/FlashMessages.js
deleted file mode 100644
index f1dd5de..0000000
--- a/src/app/components/@FlashMessages/FlashMessages.js
+++ /dev/null
@@ -1,43 +0,0 @@
-import { connect } from 'react-redux'
-import { noop } from 'lodash'
-import PropTypes from 'prop-types'
-import { removeMessage } from 'app/actions/flash.actions'
-import { Bem } from 'app/utils'
-import * as flashSelectors from 'app/selectors/flash.selectors'
-import Msg from './Msg'
-
-const bem = new Bem('FlashMessages')
-
-@connect(state => ({
-  messages: flashSelectors.getMessages(state),
-}), { removeMessage })
-export default class FlashMessages extends React.Component {
-  static propTypes = {
-    messages: PropTypes.array,
-    removeMessage: PropTypes.func,
-  };
-
-  static defaultProps = {
-    messages: [],
-    removeMessage: noop,
-  };
-
-  clickMessage(msg) {
-    this.props.removeMessage(msg.id)
-  }
-
-  render() {
-    const { messages } = this.props
-    return (
-      <div {...bem()}>
-        {messages.map(msg => (
-          <Msg key={msg.id}
-            msg={msg}
-            onClick={() => this.clickMessage(msg)}
-            {...bem('Msg')}
-          />
-        ))}
-      </div>
-    )
-  }
-}
diff --git a/src/app/components/@FlashMessages/FlashMessages.spec.js b/src/app/components/@FlashMessages/FlashMessages.spec.js
deleted file mode 100644
index a3dc369..0000000
--- a/src/app/components/@FlashMessages/FlashMessages.spec.js
+++ /dev/null
@@ -1,103 +0,0 @@
-import WrappedFlashMessages, { WrappedComponent as FlashMessages } from './FlashMessages'
-import Msg from './Msg'
-import { shallow, mount } from 'enzyme'
-import { Provider } from 'react-redux'
-import * as actions from 'app/actions/flash.actions'
-import styles from './Msg.module.scss'
-
-describe('FlashMessages Component', function () {
-  beforeEach(() => {
-    this.messages = makeMessages()
-    this.tree = shallow(<FlashMessages />)
-  })
-
-  it('renders a div with className as its root element', () => {
-    expect(this.tree.at(0).type()).to.eql('div')
-    expect(this.tree.at(0).props()).to.have.property(
-      'className', 'FlashMessages'
-    )
-  })
-
-  it('renders an empty div when no messages', () => {
-    expect(this.tree.children()).to.have.length(0)
-  })
-
-  context('Given Messages', () => {
-    const clickHandler = sinon.spy()
-
-    beforeEach(() => {
-      clickHandler.reset()
-      this.tree = shallow(
-        <FlashMessages
-          messages={this.messages}
-          removeMessage={clickHandler}
-        />
-      )
-    })
-
-    it('renders a Msg component for each message in props', () => {
-      expect(this.tree.find(Msg)).to.have.length(this.messages.length)
-      this.messages.forEach(msg => {
-        const item = this.tree.find({ msg })
-        expect(item).to.have.length(1)
-        expect(item.type()).to.eql(Msg)
-      })
-    })
-
-    it('dispatches a removeMsg with the msg id when clicked', () => {
-      this.messages.forEach(msg => {
-        const item = this.tree.find({ msg })
-        item.simulate('click')
-        expect(clickHandler).to.have.been.calledWith(msg.id)
-        clickHandler.reset()
-      })
-    })
-  })
-})
-
-describe('Connected FlashMessages', function () {
-  beforeEach(() => {
-    this.messages = makeMessages()
-    this.store = helpers.createStore({
-      flash: { messages: this.messages },
-    })
-    sinon.stub(this.store, 'dispatch')
-    this.tree = mount(
-      <Provider store={this.store}>
-        <WrappedFlashMessages />
-      </Provider>
-    )
-  })
-
-  it('should render messages from store', () => {
-    const flashMessages = this.tree.find(`.${styles.msg}`)
-    expect(flashMessages).to.have.length(this.messages.length)
-    flashMessages.forEach((node, i) => {
-      expect(node.text()).to.contain(this.messages[i].message)
-    })
-  })
-
-  it('should be connected to removeMessage action creator', () => {
-    const flashMessage = this.tree.find(FlashMessages)
-    flashMessage.prop('removeMessage')('123')
-    expect(
-      this.store.dispatch
-    ).to.have.been.calledWith(actions.removeMessage('123'))
-  })
-})
-
-const makeMessages = () => [
-  {
-    id: '1',
-    message: 'test message',
-    type: 'error',
-  }, {
-    id: '2',
-    message: 'another test message',
-    type: 'good',
-  }, {
-    id: '3',
-    message: 'more test message',
-    type: 'info',
-  },
-]
diff --git a/src/app/components/@FlashMessages/Msg.js b/src/app/components/@FlashMessages/Msg.js
deleted file mode 100644
index 50716aa..0000000
--- a/src/app/components/@FlashMessages/Msg.js
+++ /dev/null
@@ -1,24 +0,0 @@
-import { Bem } from 'app/utils'
-import styles from './Msg.module.scss'
-import PropTypes from 'prop-types'
-
-const bem = new Bem(styles.msg)
-
-const Msg = ({ msg, className, ...props }) => (
-  <span {...props} {...bem(null, msg.type, className)}>
-    {msg.message}
-    &nbsp;
-    <strong className={styles.close}>
-      x
-    </strong>
-  </span>
-)
-
-Msg.propTypes = {
-  msg: PropTypes.shape({
-    type: PropTypes.oneOf([ 'error', 'good', 'info' ]),
-    message: PropTypes.string,
-  }).isRequired,
-}
-
-export default Msg
diff --git a/src/app/components/@FlashMessages/Msg.module.scss b/src/app/components/@FlashMessages/Msg.module.scss
deleted file mode 100644
index 11c7fb3..0000000
--- a/src/app/components/@FlashMessages/Msg.module.scss
+++ /dev/null
@@ -1,29 +0,0 @@
-@import '~vars';
-@import '~tao-scss/index';
-
-.msg {
-  display: block;
-  margin-bottom: rem(5px);
-
-  &--info {
-    color: $info-blue;
-  }
-
-  &--error {
-    color: $error-red;
-  }
-
-  &--good {
-    color: $good-green;
-  }
-}
-
-.close {
-  border: 1px solid $border-grey;
-  border-radius: rem(10px);
-  padding: 1px rem(5px);
-
-  &:hover {
-    cursor: pointer;
-  }
-}
diff --git a/src/app/components/@FlashMessages/Msg.spec.js b/src/app/components/@FlashMessages/Msg.spec.js
deleted file mode 100644
index bbedf74..0000000
--- a/src/app/components/@FlashMessages/Msg.spec.js
+++ /dev/null
@@ -1,53 +0,0 @@
-import Msg from './Msg'
-import { shallow } from 'enzyme'
-import styles from './Msg.module.scss'
-
-describe('Msg Component', function () {
-  beforeEach(()=> {
-    this.messages = makeMessages()
-    this.msg = _.sample(this.messages)
-    this.tree = shallow(<Msg msg={this.msg} />)
-  })
-
-  it('should have the className from styles', ()=> {
-    expect(this.tree.hasClass(styles.msg)).to.eql(true)
-  })
-
-  it('should render the message', ()=> {
-    expect(this.tree.text()).to.contain(this.msg.message)
-  })
-
-  it('have the bem-modifier according to the msg.type', ()=> {
-    this.messages.forEach(msg => {
-      this.tree = shallow(<Msg msg={msg} />)
-      const modifierClass = `${styles.msg}--${msg.type}`
-      expect(this.tree.hasClass(modifierClass)).to.eql(true)
-    })
-  })
-
-  it('should transfer props to the root element', ()=> {
-    const otherProps = { id: 'bar', 'data-other': 'prop' }
-    this.tree = shallow(<Msg msg={this.msg} {...otherProps} />)
-    expect(this.tree.props()).to.shallowDeepEqual(otherProps)
-  })
-
-  it('should render a close button with close className', ()=> {
-    expect(this.tree.find({ className: styles.close })).to.have.length(1)
-  })
-})
-
-const makeMessages = () => [
-  {
-    id: '1',
-    message: 'test message',
-    type: 'error',
-  }, {
-    id: '2',
-    message: 'another test message',
-    type: 'good',
-  }, {
-    id: '3',
-    message: 'more test message',
-    type: 'info',
-  },
-]
diff --git a/src/app/components/App/App.js b/src/app/components/App/App.js
index fb72acf..34145b1 100644
--- a/src/app/components/App/App.js
+++ b/src/app/components/App/App.js
@@ -1,11 +1,7 @@
 import DocumentMeta from 'react-helmet'
 import { Switch, Route } from 'react-router-dom'
 import HeadNavigation from 'app/components/HeadNavigation/HeadNavigation'
-import FlashMessages from 'app/components/@FlashMessages/FlashMessages'
-import PrivateRoute from 'app/routes/PrivateRoute/PrivateRoute'
 import CodeSplit from 'app/components/CodeSplit'
-// example image import
-import avatarPath from 'assets/avatar.jpeg'
 // example s?css module import
 import style from './App.module.scss'
 
@@ -26,8 +22,6 @@ export default class App extends React.Component {
           <meta name='keywords' content='react,redux,react-router,koa,universal,babel,es7,hmr,webpack' />
         </DocumentMeta>
         <HeadNavigation />
-        <FlashMessages />
-        <img src={avatarPath} alt='me' width='70' />
         <h1>Breko Hub</h1>
         <main className={style.content}>
           <Switch>
@@ -36,19 +30,6 @@ export default class App extends React.Component {
               path='/'
               load={() => import('app/routes/HomeRoute/HomeRoute')}
             />
-            <CodeSplitRoute
-              path='/bar'
-              load={() => import('app/routes/BarRoute/BarRoute')}
-            />
-            <CodeSplitRoute
-              path='/oops'
-              load={() => import('app/routes/OopsRoute/OopsRoute')}
-            />
-            <Route
-              path='/private'
-              // no dynamic import when server side redirect
-              component={PrivateRoute}
-            />
             <CodeSplitRoute
               load={() => import('app/routes/NotFoundRoute/NotFoundRoute')}
             />
diff --git a/src/app/components/App/App.spec.js b/src/app/components/App/App.spec.js
index 4108149..f5e4332 100644
--- a/src/app/components/App/App.spec.js
+++ b/src/app/components/App/App.spec.js
@@ -1,10 +1,8 @@
 import DocumentMeta from 'react-helmet'
 import HeadNavigation from 'app/components/HeadNavigation/HeadNavigation'
-import FlashMessages from 'app/components/@FlashMessages/FlashMessages'
 import App from './App'
 import { shallow } from 'enzyme'
 import styles from './App.module.scss'
-import avatarPath from 'assets/avatar.jpeg'
 
 describe('App Component', function () {
   helpers.setupSnapshots(__filename)
@@ -27,25 +25,15 @@ describe('App Component', function () {
     expect(secondChild).to.have.type(HeadNavigation)
   })
 
-  it('renders FlashMessages as third child', () => {
+  it('renders a h1 as third child', () => {
     const thirdChild = this.tree.childAt(2)
-    expect(thirdChild).to.have.type(FlashMessages)
+    expect(thirdChild).to.have.type('h1')
   })
 
-  it('renders an img as fourth child', () => {
+  it('renders a main.content as fourth child', () => {
     const fourthChild = this.tree.childAt(3)
-    expect(fourthChild).to.have.type('img')
-  })
-
-  it('renders a h1 as fifth child', () => {
-    const fifthChild = this.tree.childAt(4)
-    expect(fifthChild).to.have.type('h1')
-  })
-
-  it('renders a main.content as sixth child', () => {
-    const sixthChild = this.tree.childAt(5)
-    expect(sixthChild).to.have.type('main')
-    expect(sixthChild).to.have.className(styles.content)
+    expect(fourthChild).to.have.type('main')
+    expect(fourthChild).to.have.className(styles.content)
   })
 
   describe('DocumentMeta', () => {
@@ -64,17 +52,6 @@ describe('App Component', function () {
     })
   })
 
-  describe('Img', () => {
-    it('has avatar as src with alt=me and width=70', () => {
-      const img = this.tree.find('img')
-      expect(img.props()).to.shallowDeepEqual({
-        src: avatarPath,
-        alt: 'me',
-        width: '70',
-      })
-    })
-  })
-
   describe('Title', () => {
     it('should have "Breko Hub" as text child', () => {
       const title = this.tree.find('h1')
diff --git a/src/app/components/App/App.spec.js.snap b/src/app/components/App/App.spec.js.snap
index f41d096..6656fda 100644
--- a/src/app/components/App/App.spec.js.snap
+++ b/src/app/components/App/App.spec.js.snap
@@ -10,18 +10,6 @@ exports[`App Component Main renders routes inside Main 1`] = `
       load={[Function]}
       path="/"
     />
-    <CodeSplitRoute
-      load={[Function]}
-      path="/bar"
-    />
-    <CodeSplitRoute
-      load={[Function]}
-      path="/oops"
-    />
-    <Route
-      component={[Function]}
-      path="/private"
-    />
     <CodeSplitRoute
       load={[Function]}
     />
diff --git a/src/app/components/HeadNavigation/HeadNavigation.js b/src/app/components/HeadNavigation/HeadNavigation.js
index cbfd365..0007b1f 100644
--- a/src/app/components/HeadNavigation/HeadNavigation.js
+++ b/src/app/components/HeadNavigation/HeadNavigation.js
@@ -11,12 +11,6 @@ export default class HeadNavigation extends React.Component {
         <NavLink exact activeClassName={styles.active} to='/'>
           Home
         </NavLink>
-        <NavLink activeClassName={styles.active} to='/bar'>
-          Bar
-        </NavLink>
-        <NavLink activeClassName={styles.active} to='/private'>
-          Private
-        </NavLink>
       </nav>
     )
   }
diff --git a/src/app/components/HeadNavigation/HeadNavigation.spec.js b/src/app/components/HeadNavigation/HeadNavigation.spec.js
index a289b21..dd6e2af 100644
--- a/src/app/components/HeadNavigation/HeadNavigation.spec.js
+++ b/src/app/components/HeadNavigation/HeadNavigation.spec.js
@@ -22,8 +22,6 @@ describe('Head Navigation Component', function () {
   describe('NavLinks', ()=> {
     const links = [
       { to: '/', content: 'Home' },
-      { to: '/bar', content: 'Bar' },
-      { to: '/private', content: 'Private' },
     ]
 
     it('only renders the necessary links', ()=> {
diff --git a/src/app/reducers/bar.reducers.js b/src/app/reducers/bar.reducers.js
deleted file mode 100644
index 25a7d59..0000000
--- a/src/app/reducers/bar.reducers.js
+++ /dev/null
@@ -1,28 +0,0 @@
-import { PENDING, REJECTED, FULFILLED } from 'redux-promise-middleware'
-import { typeToReducer, get } from 'app/utils'
-import { API_FETCH } from 'app/actions/types'
-
-const getBar = get('payload.bar')
-
-const initialState = {
-  isPending: false,
-  error: false,
-  data: [],
-}
-
-export const barReducers = typeToReducer({
-  [API_FETCH]: {
-    [PENDING]: () => ({
-      ...initialState,
-      isPending: true,
-    }),
-    [REJECTED]: (state, action) => ({
-      ...initialState,
-      error: action.payload,
-    }),
-    [FULFILLED]: (state, action) => ({
-      ...initialState,
-      data: getBar(action),
-    }),
-  },
-}, initialState)
diff --git a/src/app/reducers/bar.reducers.spec.js b/src/app/reducers/bar.reducers.spec.js
deleted file mode 100644
index 1175aa1..0000000
--- a/src/app/reducers/bar.reducers.spec.js
+++ /dev/null
@@ -1,82 +0,0 @@
-import { PENDING, REJECTED, FULFILLED } from 'redux-promise-middleware'
-import { barReducers } from './bar.reducers'
-import { API_FETCH } from 'app/actions/types'
-
-describe('Bar Reducers', ()=> {
-  const initialState = {
-    isPending: false,
-    error: false,
-    data: [],
-  }
-  const irrelevantAction = { type: 'IRRELEVANT_ACTION' }
-
-  it('returns the initialState when no state', () => {
-    expect(barReducers(undefined, irrelevantAction)).to.eql(initialState)
-  })
-
-  describe('API_FETCH_PENDING', ()=> {
-    const stateBeforeDispatch = {
-      data: 'test dirty data',
-      error: new Error('test previous state error'),
-      isPending: !initialState.isPending,
-    }
-
-    it('sets initialState with isPending=true', ()=> {
-      const apiFetchPendingAction = {
-        type: `${API_FETCH}_${PENDING}`,
-      }
-      expect(
-        barReducers(stateBeforeDispatch, apiFetchPendingAction)
-      ).to.eql({
-        ...initialState,
-        isPending: true,
-      })
-    })
-  })
-
-  describe('API_FETCH_REJECTED', ()=> {
-    const stateBeforeDispatch = {
-      data: 'test dirty data',
-      error: new Error('test previous state error'),
-      isPending: !initialState.isPending,
-    }
-
-    it('sets initialState with payload as error', ()=> {
-      const apiFetchRejectedAction = {
-        type: `${API_FETCH}_${REJECTED}`,
-        error: true,
-        payload: new Error('api_fetch error'),
-      }
-      expect(
-        barReducers(stateBeforeDispatch, apiFetchRejectedAction)
-      ).to.eql({
-        ...initialState,
-        error: apiFetchRejectedAction.payload,
-      })
-    })
-  })
-
-  describe('API_FETCH_FULFILLED', ()=> {
-    const stateBeforeDispatch = {
-      data: 'test dirty data',
-      error: new Error('test previous state error'),
-      isPending: !initialState.isPending,
-    }
-
-    it('sets initialState with payload as data', ()=> {
-      const apiFetchFulfilledAction = {
-        type: `${API_FETCH}_${FULFILLED}`,
-        error: true,
-        payload: {
-          bar: [ 'some', 'test', 'data' ],
-        },
-      }
-      expect(
-        barReducers(stateBeforeDispatch, apiFetchFulfilledAction)
-      ).to.eql({
-        ...initialState,
-        data: apiFetchFulfilledAction.payload.bar,
-      })
-    })
-  })
-})
diff --git a/src/app/reducers/flash.reducers.js b/src/app/reducers/flash.reducers.js
deleted file mode 100644
index bd02401..0000000
--- a/src/app/reducers/flash.reducers.js
+++ /dev/null
@@ -1,23 +0,0 @@
-import { filter } from 'ramda'
-import { typeToReducer, get } from 'app/utils'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from 'app/actions/types'
-
-const getFlashId = get('payload.id')
-
-const initialState = {
-  messages: [],
-}
-
-export const flashReducers = typeToReducer({
-  [REMOVE_MESSAGE]: (state, action) => ({
-    ...state,
-    messages: filter(
-      flash => flash.id !== getFlashId(action),
-      state.messages
-    ),
-  }),
-  [ADD_MESSAGE]: (state, action) => ({
-    ...state,
-    messages: [ ...state.messages, action.payload ],
-  }),
-}, initialState)
diff --git a/src/app/reducers/flash.reducers.spec.js b/src/app/reducers/flash.reducers.spec.js
deleted file mode 100644
index d33a8a8..0000000
--- a/src/app/reducers/flash.reducers.spec.js
+++ /dev/null
@@ -1,85 +0,0 @@
-import { flashReducers } from './flash.reducers'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from 'app/actions/types'
-
-describe('Flash Reducers', ()=> {
-  const initialState = {
-    messages: [],
-  }
-  const irrelevantAction = { type: 'IRRELEVANT_ACTION' }
-
-  it('should return the initial state', ()=> {
-    expect(flashReducers(undefined, irrelevantAction)).to.eql(initialState)
-  })
-
-  describe('REMOVE_FLASH', ()=> {
-    const messages = [
-      { id: 'test 1' },
-      { id: 'test 2' },
-      { id: 'test 3' },
-      { id: 'test 4' },
-      { id: 'test 5' },
-    ]
-    const previousState = {
-      messages,
-      test: 'test previous state',
-    }
-    const removeFlashAction = {
-      type: REMOVE_MESSAGE,
-      payload: {
-        id: _.sample(messages).id,
-      },
-    }
-
-    it('does nothing when the id isn\'t contained', ()=> {
-      function assertStateUnchanged(state, id) {
-        removeFlashAction.payload.id = id
-        expect(
-          flashReducers(state, removeFlashAction)
-        ).to.eql(state)
-      }
-      assertStateUnchanged(previousState, 'not-contained')
-      assertStateUnchanged(previousState, void 0)
-      assertStateUnchanged(previousState, 99)
-      assertStateUnchanged(previousState, {})
-      assertStateUnchanged(previousState, '')
-    })
-
-    it('removes a message by id', ()=> {
-      _.map(messages, ({ id }) => {
-        removeFlashAction.payload.id = id
-        const actual = flashReducers(previousState, removeFlashAction)
-        const expectedMessages = _.reject(messages, {
-          id: removeFlashAction.payload.id,
-        })
-        expect(actual.messages).to.eql(expectedMessages)
-      })
-    })
-  })
-
-  describe('ADD_MESSAGE', () => {
-    const messages = [
-      { id: 'test 1' },
-      { id: 'test 2' },
-      { id: 'test 3' },
-      { id: 'test 4' },
-      { id: 'test 5' },
-    ]
-    const previousState = {
-      messages,
-      test: 'test previous state',
-    }
-    const addFlashAction = {
-      type: ADD_MESSAGE,
-      payload: { id: 'test payload id' },
-    }
-
-    it('keeps previous state and adding action.payload to messages', () => {
-      expect(
-        flashReducers(previousState, addFlashAction)
-      ).to.eql({
-        ...previousState,
-        messages: messages.concat(addFlashAction.payload),
-      })
-    })
-  })
-})
diff --git a/src/app/reducers/index.js b/src/app/reducers/index.js
index ab2b1ed..2bf2e92 100644
--- a/src/app/reducers/index.js
+++ b/src/app/reducers/index.js
@@ -1,10 +1,6 @@
 import { combineReducers } from 'redux'
 import { routerReducer } from 'react-router-redux'
-import { flashReducers as flash } from './flash.reducers'
-import { barReducers as bar } from './bar.reducers'
 
 export default combineReducers({
-  flash,
-  bar,
   routing: routerReducer,
 })
diff --git a/src/app/routes/BarRoute/BarRoute.js b/src/app/routes/BarRoute/BarRoute.js
deleted file mode 100644
index c7ca404..0000000
--- a/src/app/routes/BarRoute/BarRoute.js
+++ /dev/null
@@ -1,38 +0,0 @@
-import { connect } from 'react-redux'
-import DocumentMeta from 'react-helmet'
-import * as barActions from 'app/actions/bar.actions'
-import { get } from 'app/utils'
-import style from './BarRoute.module.scss'
-
-@connect(state => ({
-  bar: get('bar.data')(state),
-}), barActions)
-export default class BarRoute extends React.Component {
-  static defaultProps = {
-    bar: [],
-  };
-
-  componentDidMount() {
-    this.props.apiFetch()
-  }
-
-  render() {
-    const { bar } = this.props
-    return (
-      <section className='BarRoute'>
-        <DocumentMeta>
-          <title>Bar</title>
-        </DocumentMeta>
-        <h3>Bar</h3>
-        <p>This route is making an api request</p>
-        <p>If you change the response from <code>server/api/bar</code> endpoint</p>
-        <p>And then navigate away and back to this route, you'll see the changes immediately</p>
-        <div className={style.block}>
-          {bar.map((item, i) =>
-            <p key={i}>{item}</p>
-          )}
-        </div>
-      </section>
-    )
-  }
-}
diff --git a/src/app/routes/BarRoute/BarRoute.module.scss b/src/app/routes/BarRoute/BarRoute.module.scss
deleted file mode 100644
index 988b1ec..0000000
--- a/src/app/routes/BarRoute/BarRoute.module.scss
+++ /dev/null
@@ -1,7 +0,0 @@
-$grey: #ddd;
-
-.block {
-  background-color: $grey;
-  border-radius: 5px;
-  padding: 2px 10px;
-}
diff --git a/src/app/routes/BarRoute/BarRoute.spec.js b/src/app/routes/BarRoute/BarRoute.spec.js
deleted file mode 100644
index cf804e0..0000000
--- a/src/app/routes/BarRoute/BarRoute.spec.js
+++ /dev/null
@@ -1,11 +0,0 @@
-import { WrappedComponent as BarRoute } from './BarRoute'
-
-describe('BarRoute Component', function () {
-  helpers.setupSnapshots(__filename)
-
-  it('matches snapshot', () => {
-    expect(
-      snap(shallow(<BarRoute />))
-    ).to.matchSnapshot()
-  })
-})
diff --git a/src/app/routes/BarRoute/BarRoute.spec.js.snap b/src/app/routes/BarRoute/BarRoute.spec.js.snap
deleted file mode 100644
index 0d6ae18..0000000
--- a/src/app/routes/BarRoute/BarRoute.spec.js.snap
+++ /dev/null
@@ -1,34 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`BarRoute Component matches snapshot 1`] = `
-<section
-  className="BarRoute"
->
-  <HelmetWrapper
-    encodeSpecialCharacters={true}
-  >
-    <title>
-      Bar
-    </title>
-  </HelmetWrapper>
-  <h3>
-    Bar
-  </h3>
-  <p>
-    This route is making an api request
-  </p>
-  <p>
-    If you change the response from 
-    <code>
-      server/api/bar
-    </code>
-     endpoint
-  </p>
-  <p>
-    And then navigate away and back to this route, you'll see the changes immediately
-  </p>
-  <div
-    className="src-app-routes-BarRoute-BarRoute-module-block"
-  />
-</section>
-`;
diff --git a/src/app/routes/OopsRoute/OopsRoute.js b/src/app/routes/OopsRoute/OopsRoute.js
deleted file mode 100644
index 1ded03a..0000000
--- a/src/app/routes/OopsRoute/OopsRoute.js
+++ /dev/null
@@ -1,10 +0,0 @@
-
-export default class OopsRoute extends React.Component {
-  render() {
-    return (
-      <section className='OopsRoute'>
-        PROBLEM
-      </section>
-    )
-  }
-}
diff --git a/src/app/routes/OopsRoute/OopsRoute.spec.js b/src/app/routes/OopsRoute/OopsRoute.spec.js
deleted file mode 100644
index 9941534..0000000
--- a/src/app/routes/OopsRoute/OopsRoute.spec.js
+++ /dev/null
@@ -1,11 +0,0 @@
-import OopsRoute from './OopsRoute'
-
-describe('OopsRoute Component', function () {
-  helpers.setupSnapshots(__filename)
-
-  it('matches snapshot', () => {
-    expect(
-      snap(shallow(<OopsRoute />))
-    ).to.matchSnapshot()
-  })
-})
diff --git a/src/app/routes/OopsRoute/OopsRoute.spec.js.snap b/src/app/routes/OopsRoute/OopsRoute.spec.js.snap
deleted file mode 100644
index 3f527cc..0000000
--- a/src/app/routes/OopsRoute/OopsRoute.spec.js.snap
+++ /dev/null
@@ -1,9 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`OopsRoute Component matches snapshot 1`] = `
-<section
-  className="OopsRoute"
->
-  PROBLEM
-</section>
-`;
diff --git a/src/app/routes/PrivateRoute/PrivateRoute.js b/src/app/routes/PrivateRoute/PrivateRoute.js
deleted file mode 100644
index dd2a9c0..0000000
--- a/src/app/routes/PrivateRoute/PrivateRoute.js
+++ /dev/null
@@ -1,18 +0,0 @@
-import { connect } from 'react-redux'
-import { replace } from 'react-router-redux'
-import { addMessage } from 'app/actions/flash.actions'
-
-
-@connect(null, { replace, addMessage })
-export default class PrivateRoute extends React.Component {
-  componentWillMount() {
-    this.props.addMessage('You may not view the private route!!', 'error')
-    this.props.replace('/')
-  }
-
-  render() {
-    return (
-      <h1>Private</h1>
-    )
-  }
-}
diff --git a/src/app/sagas/index.js b/src/app/sagas/index.js
index bdd5cc5..f8addb3 100644
--- a/src/app/sagas/index.js
+++ b/src/app/sagas/index.js
@@ -1,37 +1,3 @@
-import { put, fork, take, race, select } from 'redux-saga/effects'
-import { delay } from 'redux-saga'
-import * as flashSelectors from 'app/selectors/flash.selectors'
-import * as flashActions from 'app/actions/flash.actions'
-import { REMOVE_MESSAGE, ADD_MESSAGE } from 'app/actions/types'
-
-const DAEMON = true
-const log = debug('sagas')
-
-export function * timeoutRemoveFlash(nextFlash) {
-  if (nextFlash) {
-    const { removed } = yield race({
-      timeout: delay(4000),
-      removed: take(action =>
-        action.type === REMOVE_MESSAGE
-        && action.id === nextFlash.id
-      ),
-    })
-    if (!removed) {
-      yield put(flashActions.removeMessage(nextFlash.id))
-    }
-  }
-}
-
-export function * takeFlashMessages() {
-  while (DAEMON) {
-    const action = yield take(ADD_MESSAGE)
-    log('Flash added, saga will remove it automatically')
-    yield fork(timeoutRemoveFlash, action.payload)
-  }
-}
-
 export default function * rootSaga() {
-  const nextFlash = yield select(flashSelectors.getNextMessage)
-  yield fork(timeoutRemoveFlash, nextFlash)
-  yield fork(takeFlashMessages)
+  
 }
diff --git a/src/app/sagas/index.spec.js b/src/app/sagas/index.spec.js
index e95c2b8..e69de29 100644
--- a/src/app/sagas/index.spec.js
+++ b/src/app/sagas/index.spec.js
@@ -1,38 +0,0 @@
-import rootSaga, { timeoutRemoveFlash, takeFlashMessages } from './index'
-import { select, fork, take } from 'redux-saga/effects'
-import * as flashSelectors from 'app/selectors/flash.selectors'
-import { ADD_MESSAGE } from 'app/actions/types'
-
-describe('Saga Tests', function () {
-  describe('Root Saga', ()=> {
-    beforeEach(()=> {
-      this.saga = rootSaga()
-    })
-
-    it('should call select with getNextFlashMessage', ()=> {
-      const nextFlash = { ret: 'value' }
-      expect(this.saga.next()).to.deep.yield(select(flashSelectors.getNextMessage))
-      expect(this.saga.next(nextFlash)).to.deep.yield(fork(timeoutRemoveFlash, nextFlash))
-      expect(this.saga.next()).to.deep.yield(fork(takeFlashMessages))
-    })
-  })
-
-  describe('takeFlashMessages', ()=> {
-    beforeEach(()=> {
-      this.saga = takeFlashMessages()
-    })
-
-    it('should call take with an add_message', ()=> {
-      const takeReturn = { payload: { fake: 'stuff' } }
-      expect(this.saga.next()).to.deep.yield(take(ADD_MESSAGE))
-      expect(this.saga.next(takeReturn)).to.deep.yield(fork(timeoutRemoveFlash, takeReturn.payload))
-      expect(this.saga.next().done).to.eql(false)
-    })
-  })
-
-  describe.skip('timeoutRemoveFlash', ()=> {
-    beforeEach(()=> {
-      this.saga = timeoutRemoveFlash()
-    })
-  })
-})
diff --git a/src/app/selectors/flash.selectors.js b/src/app/selectors/flash.selectors.js
deleted file mode 100644
index 69a71c2..0000000
--- a/src/app/selectors/flash.selectors.js
+++ /dev/null
@@ -1,7 +0,0 @@
-import { createSelector } from 'reselect'
-import { head } from 'ramda'
-import { get } from 'app/utils'
-
-export const getMessages = get('flash.messages', [])
-
-export const getNextMessage = createSelector([ getMessages ], head)
diff --git a/src/app/selectors/flash.selectors.spec.js b/src/app/selectors/flash.selectors.spec.js
deleted file mode 100644
index 7b706f8..0000000
--- a/src/app/selectors/flash.selectors.spec.js
+++ /dev/null
@@ -1,39 +0,0 @@
-import * as flashSelectors from './flash.selectors'
-
-describe('Flash Selectors', function () {
-  describe('getMessages()', () => {
-    it('returns an empty array by default', () => {
-      expect(
-        flashSelectors.getMessages(null)
-      ).to.be.an('array').with.length(0)
-    })
-
-    it('returns the flash messages', () => {
-      const state = {
-        flash: {
-          messages: [ { id: 'test' }, { id: 'messages' } ],
-        },
-      }
-      expect(flashSelectors.getMessages(state)).to.eql(state.flash.messages)
-    })
-  })
-
-  describe('getNextMessage()', () => {
-    it('returns undefined by default', () => {
-      expect(
-        flashSelectors.getNextMessage(null)
-      ).to.eql(undefined)
-    })
-
-    it('returns the flash message start of list', () => {
-      const state = {
-        flash: {
-          messages: [ { id: 'test' }, { id: 'messages' } ],
-        },
-      }
-      expect(
-        flashSelectors.getNextMessage(state)
-      ).to.eql(state.flash.messages[0])
-    })
-  })
-})
diff --git a/src/assets/avatar.jpeg b/src/assets/avatar.jpeg
deleted file mode 100644
index 37200ab27bc433a9c834a0508ab52a0fb1caf846..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 5553
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
PPmL$vt##z5T>khE?!CM^

diff --git a/src/server-instance.js b/src/server-instance.js
index b0c79a3..4cfd504 100644
--- a/src/server-instance.js
+++ b/src/server-instance.js
@@ -5,7 +5,6 @@ import session from 'koa-session-store'
 import logger from 'koa-logger'
 import favicon from 'koa-favicon'
 import { ASSETS } from 'config/paths'
-import sessionFlashArray from 'server/middleware/sessionFlashArray'
 import handleError from 'server/middleware/handleError'
 import compressible from 'compressible'
 
@@ -18,7 +17,6 @@ app.use(compress({
 }))
 app.use(favicon(`${ASSETS}/favicon.ico`))
 app.use(convert(session()))
-app.use(sessionFlashArray())
 
 // reads process.env.DEBUG
 /* istanbul ignore if  */
diff --git a/src/server/api/index.js b/src/server/api/index.js
index 7ac42c6..c467940 100644
--- a/src/server/api/index.js
+++ b/src/server/api/index.js
@@ -9,9 +9,6 @@ apiRouter
   .all('ping', '/ping', parseBody, (ctx) => {
     ctx.response.body = { pong: ctx.request.body }
   })
-  .get('bar', '/bar', (ctx) => {
-    ctx.response.body = { bar: [ 'bruce', 'willis', 'wet', 'himself' ] }
-  })
   .all('not-found', '*', (ctx) => {
     ctx.response.status = 404
     ctx.response.body = { error: STATUS_CODES[status] }
diff --git a/src/server/middleware/flashMessages.js b/src/server/middleware/flashMessages.js
deleted file mode 100644
index 1d9efea..0000000
--- a/src/server/middleware/flashMessages.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import * as flashSelectors from 'app/selectors/flash.selectors'
-import { addMessage } from 'app/actions/flash.actions'
-
-export default async function flashMessages(ctx, next) {
-  ctx.flash.map(({ message, type }) =>
-    ctx.store.dispatch(addMessage(message, type))
-  )
-  await next()
-  if (ctx.response.status === 302) {
-    transferFlashMessages(ctx)
-  }
-}
-
-function transferFlashMessages(ctx) {
-  const nextFlashMessage = flashSelectors.getNextMessage(
-    ctx.store.getState()
-  )
-  if (nextFlashMessage) {
-    ctx.addFlash(nextFlashMessage.message, nextFlashMessage.type)
-  }
-}
diff --git a/src/server/middleware/sessionFlashArray.js b/src/server/middleware/sessionFlashArray.js
deleted file mode 100644
index 5fca3a3..0000000
--- a/src/server/middleware/sessionFlashArray.js
+++ /dev/null
@@ -1,16 +0,0 @@
-
-export default function (key='flash') {
-  return async function sessionFlashArray(ctx, next) {
-    ctx.flash = ctx.session[key] || []
-    ctx.nextFlash = []
-    ctx.addFlash = (message, type) => {
-      ctx.nextFlash.push({ message, type })
-    }
-    await next()
-    if (ctx.status === 302 && ctx.session) {
-      ctx.session[key] = ctx.nextFlash
-    } else {
-      delete ctx.session[key]
-    }
-  }
-}
diff --git a/src/server/router.js b/src/server/router.js
index 5bf298d..04f99e3 100644
--- a/src/server/router.js
+++ b/src/server/router.js
@@ -1,7 +1,6 @@
 import router from 'koa-router'
 import compose from 'koa-compose'
 import setStore from 'server/middleware/setStore'
-import flashMessages from 'server/middleware/flashMessages'
 import renderApp from 'server/middleware/renderApp'
 import apiRouter from 'server/api'
 
@@ -16,8 +15,6 @@ export function setRoutes(assets) {
   const renderReactApp = compose([
     /* set a store for server side state rendering */
     setStore,
-    /* wire up flashMessages from redirect to server store */
-    flashMessages,
     /* give assets from bundle, set response body from react app */
     renderApp(assets),
   ])
diff --git a/test/functional/client/client-render.test.js b/test/functional/client/client-render.test.js
index 6596ba9..e1994d3 100644
--- a/test/functional/client/client-render.test.js
+++ b/test/functional/client/client-render.test.js
@@ -6,17 +6,7 @@ describe(`Client Render`, function () {
     history.push('/')
   })
 
-  const barResponse = [ 'some', 'test', 'response', 'data' ]
-
   beforeEach((done) => {
-    fetchMock.get('/api/bar', {
-      status: 200,
-      body: { bar: barResponse },
-      headers:  {
-        'Content-Type': 'application/json',
-        'Content-Length': '1',
-      },
-    })
     this.wrapper = mount(Main)
     defer(done)
   })
@@ -39,10 +29,7 @@ describe(`Client Render`, function () {
 
   it(`only renders the HomeRoute`, () => {
     expect(this.wrapper.find('.HomeRoute')).to.be.present()
-    expect(this.wrapper.find('.OopsRoute')).not.to.be.present()
     expect(this.wrapper.find('.NotFoundRoute')).not.to.be.present()
-    expect(this.wrapper.find('.BarRoute')).not.to.be.present()
-    expect(this.wrapper.find('.PrivateRoute')).not.to.be.present()
   })
 
   describe(`Routes`, () => {
@@ -56,85 +43,5 @@ describe(`Client Render`, function () {
         expect(this.wrapper.find('.NotFoundRoute')).to.be.present()
       })
     })
-
-    describe(`/oops`, () => {
-      beforeEach((done) => {
-        history.push('/oops')
-        defer(done)
-      })
-
-      it(`renders the .OopsRoute`, () => {
-        expect(this.wrapper.find('.OopsRoute')).to.be.present()
-      })
-    })
-
-    describe(`/bar`, () => {
-      beforeEach((done) => {
-        history.push('/bar')
-        defer(done)
-      })
-
-      it(`updates the page title`, () => {
-        expect(document.title).to.eql('Bar | Breko Hub')
-      })
-
-      it(`renders the .BarRoute`, () => {
-        expect(this.wrapper.find('.BarRoute')).to.be.present()
-      })
-
-      it(`renders the response from /api/bar`, () => {
-        barResponse.forEach(item => {
-          const barItem = this.wrapper.find({ children: item })
-          expect(barItem).to.be.present()
-          expect(barItem.type()).to.eql('p')
-        })
-      })
-    })
-
-    describe(`/private`, () => {
-      const privateMsg = {
-        message: 'You may not view the private route!!',
-      }
-
-      before(() => {
-        this.clock = sinon.useFakeTimers()
-      })
-
-      after(() => {
-        this.clock.restore()
-      })
-
-      beforeEach((done) => {
-        history.push('/private')
-        defer(done)
-      })
-
-      afterEach(() => {
-        this.clock.tick(4000)
-      })
-
-      it(`redirects to /`, () => {
-        expect(this.wrapper.find('.HomeRoute')).to.be.present()
-      })
-
-      it(`adds a flash message`, () => {
-        const flashMsgs = this.wrapper.find('.FlashMessages__Msg')
-        expect(flashMsgs).to.be.present()
-        expect(flashMsgs.text()).to.contain(privateMsg.message)
-      })
-
-      it(`removes flash messages after 4 seconds`, (done) => {
-        expect(
-          this.wrapper.find('.FlashMessages__Msg')
-        ).to.be.present()
-        this.clock.tick(4000)
-        defer(() => {
-          expect(
-            this.wrapper.find('.FlashMessages__Msg')
-          ).to.have.length(0)
-          done()
-        })
-      })
-    })
   })
 })
diff --git a/test/functional/server/server-api.test.js b/test/functional/server/server-api.test.js
index 8488253..2062547 100644
--- a/test/functional/server/server-api.test.js
+++ b/test/functional/server/server-api.test.js
@@ -25,11 +25,4 @@ describe(`Server API`, function () {
       .expect('content-type', /application\/json/)
       .expect({ pong: body })
   )
-
-  it(`responds to the bar route`, () =>
-    supertest(app.callback())
-      .get('/api/bar')
-      .expect('content-type', /application\/json/)
-      .expect({ bar: [ 'bruce', 'willis', 'wet', 'himself' ] })
-  )
 })
diff --git a/test/functional/server/server-render.test.js b/test/functional/server/server-render.test.js
index 9073e8f..86e6d5e 100644
--- a/test/functional/server/server-render.test.js
+++ b/test/functional/server/server-render.test.js
@@ -199,7 +199,4 @@ describe('Server Side Render', function () {
       .expect(200)
       .expect('content-encoding', 'gzip')
   )
-
-  // TODO: needs complete session inspection
-  it(`supports server side flash messages`)
 })
-- 
2.14.1

